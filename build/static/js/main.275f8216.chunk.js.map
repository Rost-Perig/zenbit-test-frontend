{"version":3,"sources":["componets/ContactList/ContactList.module.css","componets/ContactData/ContactData.module.css","componets/FindForm/FindForm.module.css","componets/Spinner/Spinner.module.css","componets/Section/Section.js","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","componets/InputsForm/InputsForm.js","componets/ContactData/ContactData.js","componets/FindForm/FindForm.js","componets/Spinner/Spinner.js","componets/ContactList/ContactList.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js","componets/InputsForm/InputsForm.module.css"],"names":["module","exports","Section","children","className","search","createAction","axios","defaults","baseURL","addContact","createAsyncThunk","a","name","phone","rejectWithValue","post","response","data","delContact","contactId","delete","id","fetchContacts","_","get","getContactsItems","state","contacts","items","getContactsFilter","filter","getLoadingSpinner","loadingSpinner","InputsForm","useState","setName","setPhone","contArr","useSelector","dispatch","useDispatch","handleInputChange","e","currentTarget","value","reset","s","frame","onSubmit","preventDefault","findIndex","item","alert","contactToServer","form","autoComplete","input","type","placeholder","onChange","pattern","title","required","btn","ContactData","contactObj","textItem","onClick","target","dataset","key","FindForm","inputValue","setInputValue","Spinner","loaderBox","color","height","width","timeout","ContactList","contactArr","findValue","isLoadingContacts","useEffect","tempContactArr","sort","b","localeCompare","list","toLowerCase","includes","map","listItem","App","createReducer","fulfilled","action","payload","toString","pending","rejected","combineReducers","store","configureStore","reducer","contactsReducer","ReactDOM","render","StrictMode","document","getElementById","console","log"],"mappings":"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","file":"static/js/main.275f8216.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2N55J\",\"listItem\":\"ContactList_listItem__yqKLW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textItem\":\"ContactData_textItem__2QwxX\",\"btn\":\"ContactData_btn__ohWLa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"frame\":\"FindForm_frame__1yd3L\",\"input\":\"FindForm_input__3z1kt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loaderBox\":\"Spinner_loaderBox__NhM18\"};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ children }) => {\r\n  return (\r\n    <section>\r\n        <div className=\"container\">\r\n            {children}\r\n         </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n};\r\n\r\nexport default Section;","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const search = createAction('findForm/search');\r\n\r\n//===== без createAsyncThunk =====//\r\n\r\n// export const addContactRequest = createAction('inputsForm/addContactRequest');\r\n// export const addContactSuccess = createAction('inputsForm/addContactSuccess');\r\n// export const addContactError = createAction('inputsForm/addContactError');\r\n\r\n// export const fetchContactsRequest = createAction('contactList/fetchContactsRequest');\r\n// export const fetchContactsSuccess = createAction('contactList/fetchContactsSuccess');\r\n// export const fetchContactsError = createAction('contactList/fetchContactsError');\r\n\r\n// export const delContactRequest = createAction('contactData/delContactRequest');\r\n// export const delContactSuccess = createAction('contactData/delContactSuccess');\r\n// export const delContactError = createAction('contactData/delContactError');\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { createAsyncThunk } from '@reduxjs/toolkit'; // при использовании createAsyncThunk\r\nimport axios from 'axios';\r\nimport {\r\n  /*=без использования createAsyncThunk=*/\r\n\r\n    // addContactRequest,\r\n    // addContactSuccess,\r\n    // addContactError,\r\n    // fetchContactsRequest,\r\n    // fetchContactsSuccess,\r\n    // fetchContactsError,\r\n    // delContactRequest,\r\n    // delContactSuccess,\r\n    // delContactError\r\n} from './contacts-actions';\r\n\r\n// axios.defaults.baseURL = 'http://localhost:4040';\r\n\r\naxios.defaults.baseURL = 'https://6191e46441928b00176901ac.mockapi.io/api/v1';\r\n\r\n/*================при использовании createAsyncThunk================*/\r\n\r\nexport const addContact = createAsyncThunk(\r\n  'inputsForm/addContact',\r\n  //====c обработкщй ошибок====//\r\n  async ({name, phone}, { rejectWithValue }) => {\r\n    try {\r\n      const response = await axios.post('/contacts', {name, phone});\r\n      // console.log('data: ', response.data)\r\n      return response.data;\r\n    } catch (error) {\r\n      return rejectWithValue(error);\r\n    }\r\n  },\r\n\r\n  //====без обработки ошибок====//\r\n  // async ({name, phone}) => {\r\n  //   const response = await axios.post('/contacts', {name, phone});\r\n  //   return response.data;\r\n  // }\r\n);\r\n\r\nexport const delContact = createAsyncThunk(\r\n  'contactData/delContact',\r\n  //====c обработкщй ошибок====//\r\n  async (contactId, { rejectWithValue }) => {\r\n    try {\r\n      const response = await axios.delete(`/contacts/${contactId}`);\r\n      // console.log('id: ', response.data)\r\n      return response.data.id\r\n    } catch (error) {\r\n      return rejectWithValue(error);\r\n    }\r\n  },\r\n  \r\n  //====без обработки ошибок====//\r\n  // async (contactId) => {\r\n  //   const response = await axios.delete(`/contacts/${contactId}`);\r\n  //   return response.data.id\r\n  // }\r\n);\r\n\r\nexport const fetchContacts = createAsyncThunk(\r\n  'contactList/fetchContacts',\r\n  //====c обработкщй ошибок====//\r\n  async (_, { rejectWithValue }) => {\r\n    try {\r\n      const response = await axios.get('/contacts');\r\n      // console.log(response.data)\r\n      return response.data\r\n    } catch (error) {\r\n      return rejectWithValue(error);\r\n    }\r\n  },\r\n\r\n  //====без обработки ошибок====//\r\n  // async () => {\r\n  //   const response = await axios.get('/contacts');\r\n  //   return response.data\r\n  // }\r\n);\r\n\r\n\r\n\r\n/*================без использования createAsyncThunk================*/\r\n\r\n// export const addContact = (name, phone) => async dispatch => {\r\n//   const contact = {\r\n//     name,\r\n//     phone,\r\n//   };\r\n\r\n//   dispatch(addContactRequest());\r\n//   try {\r\n//     const { data } = await axios.post('/contacts', contact);\r\n//     dispatch(addContactSuccess(data));\r\n//   } catch (error) {\r\n//     dispatch(addContactError(error));\r\n//   };\r\n\r\n//     // axios\r\n//     //     .post('/contacts', contact)\r\n//     //     .then(({ data }) => dispatch(addContactSuccess(data)))\r\n//     //     .catch(error => dispatch(addContactError(error)));\r\n// };\r\n\r\n// export const fetchContacts = () => async dispatch => {\r\n//     dispatch(fetchContactsRequest());\r\n//     try {\r\n//     const { data } = await axios.get('/contacts');\r\n//     dispatch(fetchContactsSuccess(data));\r\n//   } catch (error) {\r\n//     dispatch(fetchContactsError(error));\r\n//   };\r\n\r\n//   // axios\r\n//   //   .get('/contacts')\r\n//   //   .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n//   //   .catch(error => dispatch(fetchContactsError(error)))\r\n// };\r\n\r\n// export const delContact = contactId => async dispatch => {\r\n//   dispatch(delContactRequest());\r\n//   // try {\r\n//   //   const { data } = await axios.delete(`/contacts/${contactId}`);\r\n//   //   dispatch(delContactSuccess(contactId));\r\n//   // } catch (error) {\r\n//   //   dispatch(delContactError(error));\r\n//   // }\r\n\r\n//   axios\r\n//     .delete(`/contacts/${contactId}`)\r\n//     .then(() => dispatch(delContactSuccess(contactId)))\r\n//     .catch(error => dispatch(delContactError(error)));\r\n// };","export const getContactsItems = state => state.contacts.items;\r\nexport const getContactsFilter = state => state.contacts.filter;\r\nexport const getLoadingSpinner = state => state.contacts.loadingSpinner;","import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux'; \r\nimport  { addContact } from 'redux/contacts/contacts-operations';\r\nimport s from './InputsForm.module.css';\r\nimport { getContactsItems } from 'redux/contacts/contacts-selectors';\r\n// import { v4 as uuidv4 } from 'uuid';\r\n\r\n\r\nexport default function InputsForm() { \r\n  const [name, setName] = useState('');\r\n  const [phone, setPhone] = useState('');\r\n\r\n  // const contArr = useSelector(state => state.contacts.items);\r\n  const contArr = useSelector(getContactsItems);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const contactToServer = ({name, phone}) => dispatch(addContact({name, phone}));  \r\n\r\n  const handleInputChange = e => {\r\n    switch (e.currentTarget.name) {\r\n      case 'subscriber':\r\n        setName(e.currentTarget.value);\r\n        // setId(uuidv4());\r\n        break;\r\n      case 'number':\r\n        setPhone(e.currentTarget.value);\r\n        break;\r\n      default:\r\n        break;\r\n    };\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    if (contArr.findIndex(item => item.name === name) !== -1) {\r\n      return alert(`Абонент с именем ${name} уже существует!`) \r\n    };\r\n    if (contArr.findIndex(item => item.phone === phone) !== -1) {\r\n      return alert(`Такой номер ${phone} уже присвоен другому абоненту!`);\r\n    };\r\n    contactToServer({name, phone});\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setPhone('');\r\n  };\r\n\r\n  return (\r\n      <div className={s.frame}>\r\n      <form\r\n        onSubmit={handleSubmit}\r\n        className={s.form}\r\n        autoComplete=\"on\">\r\n            {/* <h3>Name</h3> */}\r\n            <label >\r\n              <input\r\n                className={s.input}\r\n                type=\"text\"\r\n                name=\"subscriber\"\r\n                placeholder=\"name\"\r\n                value={name}\r\n                onChange={handleInputChange}  \r\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                required\r\n              />\r\n            </label>\r\n            \r\n            {/* <h3>Number</h3> */}\r\n\r\n            <label>\r\n                <input\r\n                className={s.input}\r\n                type=\"tel\"\r\n                name=\"number\"\r\n                placeholder=\"phone\"\r\n                value={phone}\r\n                onChange={handleInputChange} \r\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                required\r\n              />\r\n            </label> \r\n          <button type=\"submit\" className={s.btn}>Add contact</button> \r\n        </form> \r\n      </div>\r\n    )\r\n  };\r\n\r\nInputsForm.propTypes = {\r\n  subscriber: PropTypes.string,\r\n  number: PropTypes.string,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport s from './ContactData.module.css';\r\nimport { useDispatch } from 'react-redux';\r\nimport {delContact} from 'redux/contacts/contacts-operations';\r\n\r\nconst ContactData = ({ contactObj }) => { \r\n        \r\n    const dispatch = useDispatch();    \r\n    const deleteContact = e => dispatch(delContact(e.target.dataset.key));\r\n    const {name, id, phone} = contactObj;\r\n    return (\r\n        <>\r\n            <p className={s.textItem}>\r\n                <span>{name}:</span>\r\n                <span>{phone}</span>\r\n            </p>\r\n            <button\r\n                className={s.btn}\r\n                type={\"button\"}\r\n                data-key={id}\r\n                onClick={deleteContact}>\r\n                Delete\r\n            </button>\r\n        </>\r\n    );\r\n};\r\n\r\nContactData.propTypes = {\r\n  name: PropTypes.string,\r\n  phone: PropTypes.string,\r\n  id: PropTypes.string,\r\n};\r\n\r\nexport default ContactData;","import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch } from 'react-redux';   \r\nimport {search} from 'redux/contacts/contacts-actions';\r\nimport s from './FindForm.module.css';\r\n\r\n\r\nconst FindForm = () => {     \r\n    const [inputValue, setInputValue] = useState('');\r\n    const dispatch = useDispatch();  \r\n\r\n    const findValue = value => dispatch(search(value));\r\n\r\n    const findInputChange = e => {\r\n        setInputValue(e.currentTarget.value);\r\n        findValue(e.currentTarget.value);\r\n    };\r\n\r\n    // const reset = (e) => setInputValue('');\r\n\r\n    return (\r\n        <div className={s.frame}>\r\n            {/* <h3>Find contacts by name</h3> */}\r\n            <input\r\n                className={s.input}\r\n                type=\"text\"\r\n                name=\"find\"\r\n                value={inputValue}\r\n                placeholder=\"find contacts by name\"\r\n                onChange={findInputChange}\r\n                // onBlur={reset}\r\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                required\r\n            />\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default FindForm;\r\n\r\nFindForm.propTypes = {\r\n    inputValue: PropTypes.string\r\n};","import React from 'react';\r\nimport Loader from \"react-loader-spinner\";\r\nimport s from './Spinner.module.css';\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className={s.loaderBox}>\r\n      <Loader\r\n        type=\"Oval\"  //Audio Bars BallTriangle Circles Grid Oval Puff Rings TailSpin ThreeDots Hearts\r\n        color=\"#dadada\"\r\n        height={160}\r\n        width={160}\r\n        timeout={5000} // ms\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;","import { useEffect } from 'react'; \r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getContactsItems, getContactsFilter, getLoadingSpinner } from 'redux/contacts/contacts-selectors';\r\nimport {fetchContacts} from 'redux/contacts/contacts-operations';\r\nimport s from './ContactList.module.css'\r\nimport ContactData from '../ContactData';\r\nimport FindForm from '../FindForm';\r\nimport Spinner from '../Spinner';\r\n\r\nconst ContactList = () => {\r\n    const dispatch = useDispatch();  \r\n\r\n    // const contactArr = useSelector(state => state.contacts.items);\r\n    // const findValue = useSelector(state => state.contacts.filter);\r\n    // const isLoadingContacts = useSelector(state => state.contacts.loadingSpinner);\r\n\r\n    const contactArr = useSelector(getContactsItems);  \r\n    const findValue = useSelector(getContactsFilter);  \r\n    const isLoadingContacts = useSelector(getLoadingSpinner);\r\n    \r\n    useEffect(() => { dispatch(fetchContacts()) }, [dispatch]);\r\n    const tempContactArr = [...contactArr].sort((a, b) => a.name.localeCompare(b.name));\r\n\r\n     return (\r\n        <div>\r\n\r\n            <FindForm/>\r\n                \r\n            {contactArr && (<ul className={s.list}>\r\n                 {tempContactArr.filter(item => item.name.toLowerCase().includes(findValue.toLowerCase())).map(item => {\r\n                    const { id } = item;\r\n                    return (\r\n                        <li key={id} className={s.listItem}>\r\n                            < ContactData contactObj={item} />\r\n                        </li>\r\n                    );\r\n                })}\r\n             </ul>)}\r\n             \r\n            {isLoadingContacts && <Spinner/>}\r\n                \r\n        </div>\r\n    );\r\n};\r\n\r\nContactList.propTypes = {\r\n  id: PropTypes.string,\r\n};\r\n\r\nexport default ContactList;","import './App.css';\nimport Section from 'componets/Section';\nimport InputsForm from 'componets/InputsForm';\nimport ContactList from 'componets/ContactList';\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <h1>Phonebook</h1>\n\n      <Section>\n        <InputsForm/>\n      </Section>\n\n      <Section>\n        <ContactList/>\n      </Section>\n\n    </div>\n  )\n};\n\nexport default App;\n","\r\nimport { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n\r\nimport { addContact, fetchContacts, delContact } from './contacts-operations'; // c createAsyncThunk\r\n\r\nimport {\r\n    search,\r\n    //===== без createAsyncThunk =====//\r\n    // addContactRequest,\r\n    // addContactSuccess,\r\n    // addContactError,\r\n    // fetchContactsRequest,\r\n    // fetchContactsSuccess,\r\n    // fetchContactsError,\r\n    // delContactRequest,\r\n    // delContactSuccess,\r\n    // delContactError\r\n} from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n      //===== c createAsyncThunk =====//\r\n    [addContact.fulfilled]: (state, action) => [...state, action.payload], //(state, { payload }) => [...state, payload],\r\n    [fetchContacts.fulfilled]: (_, action) => action.payload, // (_, { payload }) => payload,\r\n    [delContact.fulfilled]: (state, action) => state.filter(({ id }) => id.toString() !== action.payload.toString()), //(state, { payload }) => state.filter(({ id }) => id.toString() !== payload.toString()),\r\n\r\n         //===== без createAsyncThunk =====//\r\n    // [addContactSuccess]: (state, action) => [...state, action.payload],\r\n    // [fetchContactsSuccess]: (_, action) => action.payload, \r\n    // [delContactSuccess]: (state, action) => state.filter(({ id }) => id.toString() !== action.payload.toString())\r\n    \r\n});\r\n\r\nconst filter = createReducer('', {\r\n    [search]: (_, { payload }) => payload\r\n});\r\n\r\nconst loadingSpinner = createReducer(false, {\r\n    //===== c createAsyncThunk =====//\r\n  [addContact.pending]: () => true,\r\n  [addContact.fulfilled]: () => false,\r\n  [addContact.rejected]: () => false,\r\n    \r\n  [fetchContacts.pending]: () => true,\r\n  [fetchContacts.fulfilled]: () => false,\r\n  [fetchContacts.rejected]: () => false,\r\n  \r\n  [delContact.pending]: () => true,\r\n  [delContact.fulfilled]: () => false,\r\n  [delContact.rejected]: () => false,\r\n\r\n        //===== без createAsyncThunk =====//\r\n//   [fetchContactsRequest]: () => true,    \r\n//   [fetchContactsSuccess]: () => false,    \r\n//   [fetchContactsError]: () => false,    \r\n//   [addContactRequest]: () => true,    \r\n//   [addContactSuccess]: () => false,    \r\n//   [addContactError]: () => false,    \r\n//   [delContactRequest]: () => true,    \r\n//   [delContactSuccess]: () => false,    \r\n//   [delContactError]: () => false,    \r\n});\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter,\r\n    loadingSpinner\r\n});\r\n\r\n\r\n\r\n","/*=================ВАРИАНТ с Redux Toolkit, как-то очень просто и не заморочено, но работает=================*/\r\n\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n});\r\n\r\nexport default store;\r\n\r\n\r\n/*=================ВАРИАНТ с Redux Toolkit, как-то заморочено=================*/\r\n\r\n// import { configureStore, getDefaultMiddleware  } from \"@reduxjs/toolkit\";\r\n// import contactsReducer from './contacts/contacts-reducer';\r\n\r\n\r\n// /*вариант с OOOOOOOOOOOOOOOOчень замороченой и пока непонятной, но рабочей записью в localStorage*/\r\n\r\n// // import {combineReducers } from '@reduxjs/toolkit';\r\n// import {\r\n//   FLUSH,\r\n//   REHYDRATE,\r\n//   PAUSE,\r\n//   PERSIST,\r\n//   PURGE,\r\n//   REGISTER,\r\n// } from 'redux-persist';\r\n// // import storage from 'redux-persist/lib/storage';  //для записи в локал сторидж\r\n\r\n// const middleware = [\r\n//   ...getDefaultMiddleware({\r\n//     serializableCheck: {\r\n//       ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n//     },\r\n//   }),\r\n// ];\r\n\r\n// // const persistConfig = {\r\n// //     key: 'localStorageContacts',\r\n// //     storage,\r\n// // };\r\n\r\n// // const rootReducer = combineReducers({ contacts: contactsReducer });\r\n\r\n// // const persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\n// // const store = configureStore({\r\n// //     reducer: persistedReducer,\r\n// //     middleware,\r\n// //     devTools: process.env.NODE_ENV === 'development' //devTools будет доступно только в процессе разработки (как и надо)\r\n// // });\r\n\r\n// // const persistor = persistStore(store);\r\n\r\n// // const modStore = { store, persistor };\r\n\r\n// // export default modStore;\r\n\r\n// /*вариант с записью в localStorage по \"рабоче-крестьянски\", без заморочек*/\r\n\r\n// // import { configureStore } from \"@reduxjs/toolkit\";\r\n// // import contactsReducer from './contacts/contacts-reducer';\r\n\r\n// const store = configureStore({\r\n//   reducer: { contacts: contactsReducer }, // рутовый (корневой) редюсер создается автоматически под капотом toolkit\r\n//   middleware,\r\n//   devTools: process.env.NODE_ENV === 'development' //devTools будет доступно только в процессе разработки (как и надо)\r\n// })\r\n\r\n// export default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport 'modern-normalize/modern-normalize.css';\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nconsole.log('Привіт, світ! Життя химерне!');\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"frame\":\"InputsForm_frame__1JKen\",\"form\":\"InputsForm_form__mr-J8\",\"input\":\"InputsForm_input__2PLgM\",\"btn\":\"InputsForm_btn__3Pkrb\"};"],"sourceRoot":""}